/*
 * File: app/store/rotStore.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('calendar.store.rotStore', {
    extend: 'Ext.data.Store',

    requires: [
        'calendar.model.rotModel',
        'Ext.data.proxy.Ajax',
        'Ext.data.reader.Json',
        'Ext.util.Sorter'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            groupField: 'group_sort',
            storeId: 'rotStore',
            model: 'calendar.model.rotModel',
            proxy: {
                type: 'ajax',
                url: '../../get_plan',
                reader: {
                    type: 'json',
                    rootProperty: 'root'
                },
                listeners: {
                    exception: {
                        fn: me.onAjaxException,
                        scope: me
                    }
                }
            },
            listeners: {
                metachange: {
                    fn: me.onJsonstoreMetaChange,
                    scope: me
                },
                load: {
                    fn: me.onJsonstoreLoad,
                    scope: me
                }
            },
            sorters: {
                property: 'srt'
            }
        }, cfg)]);
    },

    onAjaxException: function(proxy, request, operation, eOpts) {
        rot.ajax_exception(proxy, request, operation, eOpts);
    },

    onJsonstoreMetaChange: function(store, meta, eOpts) {
        //console.log("rotStore metaChange");
        rot.rotStore.metaChange(store, meta, eOpts);
    },

    onJsonstoreLoad: function(store, records, successful, eOpts) {
        console.log("onBeforeLoad: rotStore");
        rot.rotStore.load(store, records, successful, eOpts);
    }

});